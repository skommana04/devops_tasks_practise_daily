‚úÖ Task 1: Linux ‚Äî Log Analysis & Filtering

Scenario: You are on-call and need to quickly extract useful info from logs.

Problem:
Given a log file (app.log), find:
a) The number of ERROR entries
    cat app.log | grep -i error | wc -l 
or
    grep -i error app.log

b) Top 5 IPs triggering the most requests
    cat app.log | awk -F " " '{print $4}' | sort | uniq -c | sort -grk1 
c) Show last 20 log lines continuously (like tailing logs)
      tail -n 20 -f app.log
----------------------------------------------------------------------------

Create a dummy log file or use nginx access log if available.

üêç Task 2: Python ‚Äî Parse JSON & Generate a Report

Scenario: A DevOps tool returns JSON output (like aws cli, Prometheus, or Kubernetes response).
Write a Python script that:

Reads a servers.json file containing server names and CPU usage
 refer p1.py file
Finds servers with CPU > 80%
  refer  p2.py file
Prints a summary report
---------------------------------------------------------------

üêö Task 3: Shell Scripting ‚Äî Monitor Disk Space & Send Alert

Write a shell script disk_alert.sh that:

Checks disk usage for /

If usage > 75%, prints a warning message

Logs the result to a file disk_alert.log with timestamp

the three tasks can be found in disk_alert.sh and alert.log
----------------------------------------------------------------------

 Task 4: Linux Permissions & Processes

Create a new user devuser ----adduser devuser

Give them permission to execute a script but not edit it
sudo chmod o+rx alert.log --- i am giving permission to others(devuser)to read and execute the alert.log but not write permission

Run a process in the background and redirect logs to a file
ping www.google.com > ping.log 2>&1 & (or)
ping www.google.com > /dev/null 2>&1 &
the log normally appear on terminal..thats y taking them in a file or you can send them to null (you cant see the logsin any file) 2>&1 means sending stderr logs to the same log where stdout logs are there 
next &  meaning it is running in background

View only that process in the process list
ps aux | grep pid(7158) or
ps -ef | grep (7158)

if we need to stop the process --- kill 7158  it will stop

Skills this builds: chmod, chown, ps, top, nohup, &, > and 2>&1
---------------------------------------------------------------------

Task 5: Python + Bash ‚Äî Automate a Repetitive Task

Scenario: You deploy apps often and want a quick script to package logs.

Create a script using both Bash + Python:

Bash script to compress the /var/log directory into a .tar.gz file

tar -cvzf filename.tar.gz /var/log

Python script to upload the file to AWS S3
(If you don‚Äôt have AWS, simulate by copying to a ‚Äúbackup‚Äù folder)

this script will be found in backup.py

This builds real DevOps automation thinking: Bash for OS tasks, Python for integrations.
